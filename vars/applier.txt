# applier

## Summary

Applier executes [openshift-applier](https://github.com/redhat-cop/openshift-applier) templates on a specified cluster.

## Usage

### Requirements

Requires Jenkins agent with:
- OC
- Ansible

### Parameters

The method supports the following parameters:
```groovy
// applier.groovy#L6-L20

//Required
String inventoryPath          = ''
String requirementsPath       = ''
String ansibleRootDir         = ''
String rolesPath              = 'galaxy'
String applierPlaybook        = 'galaxy/openshift-applier/playbooks/openshift-cluster-seed.yml'

//Optional
String playbookAdditionalArgs = ''
String secretName             = ''

//Optional - Platform
String clusterAPI             = ''
String clusterToken           = ''
Integer loglevel = 0
```

### Example

```groovy
// ../test/Jenkinsfile-applier#L11-L22

stage("TEST: Run applier for 'build-s2i-executable'") {
    withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'pipelinelib-testing-my-token', usernameVariable: 'USERNAME', passwordVariable: 'TOKEN']]) {
        applier([
                inventoryPath   : ".applier/hosts",
                requirementsPath: "requirements.yml",
                ansibleRootDir  : "${WORKSPACE}/containers-quickstarts/build-s2i-executable",
                applierPlaybook : "galaxy/openshift-applier/playbooks/openshift-cluster-seed.yml",
                clusterAPI      : "https://kubernetes.default.svc",
                clusterToken    : "${TOKEN}"
        ])
    }
}
```

### Local vs Remote cluster support

As the underlying technology used is the [openshift-client-plugin](https://github.com/openshift/jenkins-client-plugin),
the ability to connect to a the local cluster, a cluster via URL/Token or using
[Jenkins configuration](https://github.com/openshift/jenkins-client-plugin#configuring-an-openshift-cluster) is as easy
as setting the clusterAPI and clusterToken parameters.

### Secret Format

This method supports using a secret (via secretName) which is used to login to the cluster that the applier will work against. Typically,
a [service account token](https://docs.openshift.com/container-platform/3.11/dev_guide/service_accounts.html#using-a-service-accounts-credentials-externally)
would be used within the secret.

```yaml
---
kind: Template
apiVersion: v1
metadata:
  name: cluster-credential-secret
  annotations:
    openshift.io/display-name: Cluster Credential Secret
objects:
- apiVersion: v1
  kind: Secret
  metadata:
    name: "${NAME}"
    labels:
      credential.sync.jenkins.openshift.io: "true"
  type: Opaque
  data:
    api: "${API_B64}"
    token: "${TOKEN_B64}"
parameters:
- name: NAME
  displayName: Name
  description: The name of secret.
  required: true
- name: API_B64
  displayName: API
  description: API url of the cluster the credential is for.
  required: true
- name: TOKEN_B64
  displayName: Token
  description: Token to use when authenticating.
  required: true
```